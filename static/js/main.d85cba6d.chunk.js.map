{"version":3,"sources":["Button.module.css","MessageList.module.css","Button.js","SpeechRecognizer.js","MessageList.js","App.js","index.js","SpeechRecognizer.module.css"],"names":["module","exports","Button","onClick","color","children","className","styles","button","style","backgroundColor","SpeechRecognizer","onMessageSent","useState","pickableEmojis","setPickableEmojis","useSpeechSynthesis","speak","voices","useSpeechRecognition","commands","command","callback","speech","toLowerCase","startsWith","search","resetTranscript","textToSpeech","join","processedSpeech","onMatchInsertRegex","match","emojiDesc","console","log","emojiMap","replace","processSpeech","setMessage","transcript","listening","browserSupportsSpeechRecognition","message","text","voice","rate","pitch","volume","clearMessage","EmojiButton","emoji","container","emojis","map","buttons","role","SpeechRecognition","stopListening","startListening","language","MessageList","messages","list","index","App","setMessages","navigator","clipboard","writeText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d85cba6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__17v_O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MessageList_list__1E2s1\"};","\r\nimport styles from './Button.module.css'\r\n\r\nconst Button = ({ onClick, color, children }) => (\r\n    <button onClick={onClick} className={styles.button} style={{ backgroundColor: color }}>\r\n        {children}\r\n    </button>\r\n)\r\n\r\nexport default Button","import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\nimport {useState} from \"react\";\r\nimport emojiMap from './emojis.json';\r\nimport Button from \"./Button\";\r\n\r\nimport styles from './SpeechRecognizer.module.css'\r\n// https://www.npmjs.com/package/react-speech-recognition\r\n// https://www.npmjs.com/package/react-speech-kit\r\n\r\n\r\nfunction processSpeech(speech) {\r\n    const onMatchInsertRegex = (match, emojiDesc) => {\r\n        console.log(match)\r\n        if (emojiMap[emojiDesc.toLowerCase()]) {\r\n            return emojiMap[emojiDesc.toLowerCase()];\r\n        }\r\n        return match;\r\n    }\r\n    speech = speech.replace(/\\binserir emoji (.*?) ok\\b/gi, onMatchInsertRegex)\r\n    speech = speech.replace(/\\binserir emoji (.*?) Ok\\b/gi, onMatchInsertRegex)\r\n    speech = speech.replace(/\\binserts? (.*?) emoji\\b/gi, onMatchInsertRegex)\r\n    speech = speech.replace(/\\badd (.*?) emoji\\b/gi, onMatchInsertRegex)\r\n\r\n    // remove suggest emojis from end\r\n    speech = speech.replace(/\\b(.*) suggest emojis?\\b/gi, '$1')\r\n\r\n    return speech;\r\n}\r\n\r\nconst SpeechRecognizer = ({ onMessageSent }) => {\r\n    const [pickableEmojis, setPickableEmojis] = useState([]);\r\n\r\n    const { speak, voices } = useSpeechSynthesis();\r\n    const { transcript, listening, browserSupportsSpeechRecognition, resetTranscript} = useSpeechRecognition({ commands: [\r\n        {\r\n            command: '*',\r\n            callback: (speech) => {\r\n                if (speech.toLowerCase().startsWith('emoji search')) {\r\n                    const search = [\"😀\", \"😁\", \"😂\", \"🤣\", \"😃\"]\r\n                    resetTranscript()\r\n                    setPickableEmojis(search)\r\n                    textToSpeech(`${speech}: ${search.join(\", \")}`)\r\n                    return\r\n                }\r\n\r\n                const processedSpeech = processSpeech(speech);\r\n                setMessage(processedSpeech)\r\n                textToSpeech(processedSpeech)\r\n            },\r\n        },\r\n        {\r\n            command: ['* Suggest Emoji', '* Suggest Emojis'],\r\n            callback: () => {\r\n                const search = [\"😀\", \"😁\", \"😂\", \"🤣\", \"😃\"]\r\n                setPickableEmojis(search)\r\n                textToSpeech(\"Emoji suggestions: \" + search.join(\", \"))\r\n            }\r\n        }\r\n    ]});\r\n    const [ message, setMessage ] = useState('');\r\n\r\n    const textToSpeech = (text) => speak({\r\n        text,\r\n        voice: voices[0],\r\n        rate: 1,\r\n        pitch: 1,\r\n        volume: 1,\r\n    });\r\n\r\n    const startListening = () => {\r\n        // https://github.com/JamesBrill/react-speech-recognition/blob/HEAD/docs/API.md#language-string\r\n        //SpeechRecognition.startListening({ language: 'en-US' });\r\n        SpeechRecognition.startListening({ language: 'pt-PT' });\r\n        setMessage(\"\")\r\n    }\r\n    const stopListening = () => {\r\n        SpeechRecognition.stopListening();\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        onMessageSent(message);\r\n        clearMessage();\r\n    }\r\n    const clearMessage = () => {\r\n        resetTranscript();\r\n        setMessage(\"\");\r\n    }\r\n    const repeatMessage = () => {\r\n        textToSpeech(message);\r\n    }\r\n\r\n    if (!browserSupportsSpeechRecognition)\r\n        return <span>O seu navegador não suporta reconhecimento de voz.</span>;\r\n\r\n    const EmojiButton = ({emoji}) => {\r\n        return <button onClick={() => {\r\n            setMessage(message + emoji);\r\n            setPickableEmojis([]);\r\n        }}>{emoji}</button>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <ul className={styles.emojis} aria-label=\"Lista de Emojis\">\r\n                {pickableEmojis.map(emoji => (\r\n                    <li key={emoji} aria-label=\"Opção de Emoji\">\r\n                        <EmojiButton emoji={emoji}/>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <p aria-label=\"Texto gravado\">{message || transcript}</p>\r\n\r\n            <div className={styles.buttons} role=\"group\">\r\n                {listening ?\r\n                    <Button onClick={stopListening} color=\"green\">A gravar 🔴</Button> :\r\n                    <Button onClick={startListening} color=\"green\">Gravar</Button>\r\n                }\r\n                <Button onClick={clearMessage} color=\"red\">Limpar</Button>\r\n                <Button onClick={sendMessage} color=\"blue\">Copiar</Button>\r\n                <Button onClick={repeatMessage} color=\"black\">Repetir</Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpeechRecognizer;","import styles from './MessageList.module.css'\r\n\r\n\r\nconst MessageList = ({ messages }) => (\r\n    <ul className={styles.list} aria-label=\"Lista de Mensagens\">\r\n        {messages.map((message, index) => (\r\n            <li key={index}>{message}</li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nexport default MessageList","import './App.css';\r\nimport SpeechRecognizer from \"./SpeechRecognizer\";\r\nimport {useState} from \"react\";\r\nimport MessageList from \"./MessageList\";\r\n\r\n\r\nfunction App() {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const addMessage = (message) => {\r\n        navigator.clipboard.writeText(message);\r\n        setMessages(messages => [...messages, message]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <header className=\"app-header\">\r\n                <h1>VOICEMOJI</h1>\r\n            </header>\r\n\r\n            <div className=\"app-container\">\r\n                <MessageList messages={messages}/>\r\n                <SpeechRecognizer onMessageSent={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SpeechRecognizer_container__2tguP\",\"buttons\":\"SpeechRecognizer_buttons__1hV3L\",\"emojis\":\"SpeechRecognizer_emojis__3gcSB\"};"],"sourceRoot":""}